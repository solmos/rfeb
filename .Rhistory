}
scrape_raw_list(bad_ids)
bad_ids <- c(2010215, 2010150, 2010216, 2010147)
scrape_raw_list(bad_ids)
scrape_raw_list <- function(game_ids) {
base_api <- "http://baloncestoenvivo.feb.es/api/ShotChart/"
game_apis <- paste0(base_api, game_ids)
api_requests <- lapply(game_apis, httr::GET)
# Dealing with API request errors
lapply(api_requests, httr::warn_for_status)
errors <- unlist(lapply(api_requests, httr::http_error))
good_requests <- api_requests[!errors]
json_list <- lapply(good_requests, content,
as = "text", encoding = "UTF-8")
raw_list <- lapply(json_list, fromJSON)
raw_list
}
scrape_raw_list(bad_ids)
scrape_raw_list <- function(game_ids) {
base_api <- "http://baloncestoenvivo.feb.es/api/ShotChart/"
game_apis <- paste0(base_api, game_ids)
api_requests <- lapply(game_apis, httr::GET)
# Dealing with API request errors
lapply(api_requests, httr::warn_for_status)
errors <- unlist(lapply(api_requests, httr::http_error))
good_requests <- api_requests[!errors]
json_list <- lapply(good_requests, httr::content,
as = "text", encoding = "UTF-8")
raw_list <- lapply(json_list, jsonlite::fromJSON)
raw_list
}
scrape_raw_list(bad_ids)
x <- scrape_raw_list(bad_ids)
View(x)
x[[1]]
x[[2]]
devtools::load_all(".")
devtools::load_all(".")
extract_raw_list <- function(game_ids) {
base_api <- "http://baloncestoenvivo.feb.es/api/ShotChart/"
game_apis <- paste0(base_api, game_ids)
api_requests <- lapply(game_apis, GET)
# WARN FOR ERRORS
lapply(api_requests, warn_for_status)
errors <- unlist(lapply(api_requests, http_error))
# CHOOSE ONLY SUCCESSFUL REQUESTS
successful_requests <- api_requests[!errors]
json_list <- lapply(successful_requests, content,
as = "text", encoding = "UTF-8")
raw_list <- lapply(json_list, fromJSON)
raw_list
}
bad_ids <- c(2010215, 2010150, 2010216, 2010147)
bad_request <- extract_raw_list(bad_ids)
game_ids <- 2010208:2010216
shots_2019_01_11 <- extract_shots(game_ids)
shots <- extract_shots(game_ids)
devtools::load_all(".")
game_ids <- 2010208:2010216
shots <- extract_shots(game_ids)
View(shots)
devtools::use_data(shots, shots)
usethis::use_data(shots, shots)
usethis::use_data(shots, shots, overwrite = TRUE)
devtools::load_all(".")
usethis::use_data(shots, shots, overwrite = TRUE, compress = "xz")
devtools::load_all(".")
game_id <- 2010208
shots <- extract_shots(game_ids)
usethis::use_data(shots, shots, overwrite = TRUE)
devtools::load_all(".")
game_id <- 2010208:2010216
shots <- extract_shots(game_ids)
usethis::use_data(shots, shots, overwrite = TRUE)
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
str(raw_list)
View(raw_list)
raw_list[[1]]
x <- raw_list[[1]]
team_info <- x$SHOTCHART$TEAM$PLAYER
View(team_info)
team_info[[1]]
team_info <- x$SHOTCHART$TEAM
View(team_info)
stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER)
# We need to create a variable identifying the team
home_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[1])
home_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[1])
away_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[2])
away_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[2])
home_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[1]])
away_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[2]])
Map(cbind, home_stats_dfs, home_team_names)
Map(cbind, home_stats_dfs, "team_name" = home_team_names)
Map(cbind, home_stats_dfs, "team_name" = home_team_names,
"team_id" = home_team_ids)
View(raw_list)
raw_list[[1]]
x <- raw_list[[1]]
attr(raw_list) <- game_ids
Map(cbind, home_stats_dfs, "team_name" = home_team_names,
"team_id" = home_team_ids,
"game_id" = game_ids)
home_stats_dfs <- Map(cbind, home_stats_dfs,
"team_name" = home_team_names,
"team_id" = home_team_ids,
"game_id" = game_ids)
away_stats_dfs <- Map(cbind, away_stats_dfs,
"team_name" = away_team_names,
"team_id" = away_team_ids,
"game_id" = game_ids)
home_stats <- unlist(home_stats_dfs)
home_stats <- do.call("rbind", home_stats_dfs)
View(home_stats)
away_stats <- do.call("rbind", away_stats_dfs)
stats <- rbind(home_stats, away_stats)
View(stats)
colnames(stats)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = fga,
fg_pct = fg_made / fg_atp)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = as.numeric(sub(",", fgp, replacement = ".")),
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp)
stats$p2_pct[is.nan(stats$p2_pct)] <- 0
View(stats)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp),
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp),
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp)
str(home_stats)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp,
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
p3_made = as.numeric(p3m),
p3_atp = as.numeric(p3a),
p3_pct = p3_made / p3_atp,
points = as.numeric(pts))
stats$p2_pct[is.nan(stats$p2_pct)] <- 0
stats$p3_pct[is.nan(stats$p3_pct)] <- 0
stats$fg_pct[is.nan(stats$fg_pct)] <- 0
shooting_stats <- function(raw_list, game_ids) {
stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER)
# We need to create a variable identifying the team
home_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[1])
home_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[1])
away_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[2])
away_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[2])
home_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[1]])
away_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[2]])
home_stats_dfs <- Map(cbind, home_stats_dfs,
"team_name" = home_team_names,
"team_id" = home_team_ids,
"game_id" = game_ids)
away_stats_dfs <- Map(cbind, away_stats_dfs,
"team_name" = away_team_names,
"team_id" = away_team_ids,
"game_id" = game_ids)
home_stats <- do.call("rbind", home_stats_dfs)
away_stats <- do.call("rbind", away_stats_dfs)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp,
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
p3_made = as.numeric(p3m),
p3_atp = as.numeric(p3a),
p3_pct = p3_made / p3_atp,
points = as.numeric(pts))
stats$p2_pct[is.nan(stats$p2_pct)] <- 0
stats$p3_pct[is.nan(stats$p3_pct)] <- 0
stats$fg_pct[is.nan(stats$fg_pct)] <- 0
}
shooting_stats <- function(raw_list, game_ids) {
stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER)
# We need to create a variable identifying the team
home_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[1])
home_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[1])
away_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[2])
away_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[2])
home_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[1]])
away_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[2]])
home_stats_dfs <- Map(cbind, home_stats_dfs,
"team_name" = home_team_names,
"team_id" = home_team_ids,
"game_id" = game_ids)
away_stats_dfs <- Map(cbind, away_stats_dfs,
"team_name" = away_team_names,
"team_id" = away_team_ids,
"game_id" = game_ids)
home_stats <- do.call("rbind", home_stats_dfs)
away_stats <- do.call("rbind", away_stats_dfs)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp,
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
p3_made = as.numeric(p3m),
p3_atp = as.numeric(p3a),
p3_pct = p3_made / p3_atp,
points = as.numeric(pts))
stats$p2_pct[is.nan(stats$p2_pct)] <- 0
stats$p3_pct[is.nan(stats$p3_pct)] <- 0
stats$fg_pct[is.nan(stats$fg_pct)] <- 0
stats
}
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
x <- shooting_stats(raw_list)
x <- shooting_stats(raw_list, game_ids)
x
View(x)
shots <- extract_shots(game_ids)
final_df <- merge(shots, x, all.x = TRUE)
View(shots)
View(shots)
devtools::load_all(".")
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
x <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
View(shots)
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
View(shots)
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
View(shots)
devtools::load_all(".")
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
final_df <- dplyr::left_join(shots, stats, by = c("game_id", "player_no"))
View(shots)
View(stats)
View(away_stats)
devtools::load_all(".")
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
View(stats)
View(stats)
View(away_stats)
colnames(home_stats)
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
View(stats)
stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER)
# We need to create a variable identifying the team
home_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[1])
home_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[1])
away_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[2])
away_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[2])
home_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[1]])
away_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[2]])
home_stats_dfs <- Map(cbind, home_stats_dfs,
"team_name" = home_team_names,
"team_id" = home_team_ids,
"game_id" = game_ids)
away_stats_dfs <- Map(cbind, away_stats_dfs,
"team_name" = away_team_names,
"team_id" = away_team_ids,
"game_id" = game_ids)
home_stats <- do.call("rbind", home_stats_dfs)
away_stats <- do.call("rbind", away_stats_dfs)
View(away_stats)
stats <- rbind(home_stats, away_stats) %>%
dplyr::mutate(player_name = name,
player_no = as.factor(no),
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp,
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
p3_made = as.numeric(p3m),
p3_atp = as.numeric(p3a),
p3_pct = p3_made / p3_atp,
points = as.numeric(pts))
View(stats)
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
View(stats)
View(stats)
devtools::load_all(".")
game_ids <- 2010208:2010216
raw_list <- scrape_raw_list(game_ids)
stats <- shooting_stats(raw_list, game_ids)
shots <- extract_shots(game_ids)
View(stats)
final_df <- dplyr::left_join(shots, stats, by = c("game_id", "player_no"))
View(final_df)
levels(shots$player_no)
levels(stats$player_no)
str(final_df)
final_df <- dplyr::left_join(shots, stats, by = c("game_id", "player_no",
"team_id"))
final_df <- dplyr::left_join(shots, stats, by = c("game_id", "player_no",
"team_name"))
str(final_df)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
View(final_df)
devtools::load_all(".")
x <- extract_shots(game_ids)
devtools::load_all(".")
x <- extract_shots(game_ids)
devtools::load_all(".")
x <- extract_shots(game_ids)
stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER)
# We need to create a variable identifying the team
home_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[1])
home_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[1])
away_team_names <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$name[2])
away_team_ids <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$id[2])
home_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[1]])
away_stats_dfs <- lapply(raw_list, function(x) x$SHOTCHART$TEAM$PLAYER[[2]])
home_stats_dfs <- Map(cbind, home_stats_dfs,
"team_name" = home_team_names,
"team_id" = home_team_ids,
"game_id" = game_ids)
away_stats_dfs <- Map(cbind, away_stats_dfs,
"team_name" = away_team_names,
"team_id" = away_team_ids,
"game_id" = game_ids)
home_stats <- do.call("rbind", home_stats_dfs)
away_stats <- do.call("rbind", away_stats_dfs)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = no,
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp,
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
p3_made = as.numeric(p3m),
p3_atp = as.numeric(p3a),
p3_pct = p3_made / p3_atp,
points = as.numeric(pts),
team_name = team_name,
team_id = team_id,
game_id = game_id)
stats$p2_pct[is.nan(stats$p2_pct)] <- 0
stats$p3_pct[is.nan(stats$p3_pct)] <- 0
stats$fg_pct[is.nan(stats$fg_pct)] <- 0
stats
str(stats)
stats <- rbind(home_stats, away_stats) %>%
dplyr::transmute(player_name = name,
player_no = no,
player_id = id,
fg_made = as.numeric(fgm),
fg_atp = as.numeric(fga),
fg_pct = fg_made / fg_atp,
p2_made = as.numeric(p2m),
p2_atp = as.numeric(p2a),
p2_pct = p2_made / p2_atp,
p3_made = as.numeric(p3m),
p3_atp = as.numeric(p3a),
p3_pct = p3_made / p3_atp,
points = as.numeric(pts),
team_name = as.character(team_name),
team_id = team_id,
game_id = game_id)
stats$p2_pct[is.nan(stats$p2_pct)] <- 0
stats$p3_pct[is.nan(stats$p3_pct)] <- 0
stats$fg_pct[is.nan(stats$fg_pct)] <- 0
stats
str(stats)
devtools::load_all(".")
x <- extract_shots(bad_ids)
bad_ids <- c(2010215, 2010150, 2010216, 2010147)
x <- extract_shots(bad_ids)
x <- scrape_raw_list(bad_ids)
View(x)
x[[1]]
attr(x)
attributes(x)
x$game_ids
attr(x, "game_ids")
devtools::load_all(".")
y <- extract_shots(bad_ids)
y <- extract_shots(bad_ids)
View(y)
devtools::load_all(".")
bad_ids <- c(2010215, 2010150, 2010216, 2010147)
game_ids <- c(2010215, 2010150, 2010216, 2010147)
error_message <- paste("Check game IDs:", bad_ids)
paste("Check game IDs:" bad_ids, collapse = TRUE)
?paste
paste(bad_ids, collapse = ",")
paste(bad_ids, collapse = ", ")
devtools::load_all(".")
extract_shots(bad_ids)
devtools::load_all(".")
extract_shots(bad_ids)
base_api <- "http://baloncestoenvivo.feb.es/api/ShotChart/"
game_apis <- paste0(base_api, game_ids)
api_requests <- lapply(game_apis, httr::GET)
# Dealing with API request errors
errors <- unlist(lapply(api_requests, httr::http_error))
good_game_ids <- game_ids[!errors]
bad_game_ids <- game_ids[errors]
error_message <- paste("request game ID", bad_game_ids)
error_message
#lapply(api_requests, httr::warn_for_status, task = error_message)
Map(httr::warn_for_status, api_requests, task = error_message)
#lapply(api_requests, httr::warn_for_status, task = error_message)
mapply(httr::warn_for_status, api_requests, task = error_message)
error_message
list(error_message)
library(purrr)
map2(api_requests, bad_game_ids, httr::warn_for_status)
Map(httr::warn_for_status, api_requests, task = error_message)
as.list(error_message)
#lapply(api_requests, httr::warn_for_status, task = error_message)
mapply(httr::warn_for_status, api_requests,
task = as.list(error_message))
#lapply(api_requests, httr::warn_for_status, task = error_message)
mapply(httr::warn_for_status, api_requests,
task = as.list(error_message))
library(httr)
mapply(warn_for_status, api_requests, task = error_message)
error_message
mapply(warn_for_status, api_requests, task = error_message[1])
Map(warn_for_status, api_requests, task = error_message)
length(error_message)
n_errors <- length(error_message)
api_requests[errors]
api_errors <- api_requests[errors]
n_errors <- length(api_errors)
warn_for_status(api_errors[[i]], task = error_message[i])
for (i in 1:n_errors) {
warn_for_status(api_errors[[i]], task = error_message[i])
}
devtools::load_all(".")
x <- extract_shots(bad_ids)
View(x)
